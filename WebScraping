{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install selenium\n!pip install undetected-chromedriver\n\nimport os \nos.system('wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb')\nos.system('apt-get update -y')\nos.system('apt-get upgrade -y')\nos.system('sudo apt --assume-yes install ./google-chrome*.deb')\nos.system('google-chrome --version')\n\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport re\n\ndef show_image():\n    driver.save_screenshot('tmp.png')\n    im = Image.open('./tmp.png')\n\n    fig = plt.figure(figsize = (15,15))\n    axis = fig.add_subplot()\n    axis.imshow(im)\n    \nfrom IPython.display import IFrame\n\ndef show_html():\n    with open('page.html', 'w+') as f:\n        f.write(driver.page_source)\n    display(IFrame(\"./page.html\", 1440, 900))\n    \n    \ndef show_mhtml():\n    res = driver.execute_cdp_cmd('Page.captureSnapshot', {})\n\n    with open('page.mhtml', 'w', newline='') as f:   \n        f.write(res['data'])\n#     display(IFrame(\"./page.mhtml\", 900,500))\n\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.proxy import Proxy, ProxyType\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.firefox.options import Options\nfrom selenium.webdriver.common.keys import Keys\nimport undetected_chromedriver as uc\nfrom time import sleep\n\nbinary_location = '/usr/bin/google-chrome'\n\nprefs = {\"download.default_directory\" : \"/kaggle/working\",\n         \"download.prompt_for_download\": False,\n        \"download.directory_upgrade\": True,\n        \"safebrowsing_for_trusted_sources_enabled\": False,\n        \"safebrowsing.enabled\": False\n        }\n\nchrome_options = uc.ChromeOptions()\n\nchrome_options.add_argument(\"--disable-extensions\")\nchrome_options.add_argument(\"--window-size=1920,1080\")\nchrome_options.add_argument(\"--start-maximized\")\nchrome_options.add_argument('--disable-application-cache')\nchrome_options.add_argument('--disable-gpu')\nchrome_options.add_argument(\"--disable-popup-blocking\")\nchrome_options.add_argument(\"--profile-directory=Default\")\nchrome_options.add_argument(\"--disable-plugins-discovery\")\nchrome_options.add_argument(\"--incognito\")\nchrome_options.add_argument(\"user_agent=DN\")\nchrome_options.add_argument('--headless=new')\nchrome_options.add_experimental_option(\"prefs\", prefs)\n\nchrome_options.binary_location = binary_location\n\ndriver = uc.Chrome(options=chrome_options)\ndriver.delete_all_cookies()","metadata":{"collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.get('https://www.arcgis.com/')\nsleep(1)\nshow_image()\nshow_mhtml()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# driver.get('https://www.apple.com')\nsleep(1)\nshow_image()\nshow_mhtml()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from selenium import webdriver\nfrom selenium.webdriver.support.ui import Select\n# driver.get('idms-input-1726612966490-0')\ndropdown = driver.find_element(by=By.XPATH, value=\"//select[@id='idms-input-1726612966490-0']\")\n# Create a Select object\nselect = Select(dropdown)\n\n# Select the option by visible text\nselect.select_by_visible_text('Vietnam')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.get('https://accounts.lambdatest.com/register')\nsleep(1)\nshow_image()\nshow_mhtml()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(By.XPATH, '/html/body/div/div/div/div/div/div/div[1]/textarea').send_keys(Keys.BACKSPACE)\n\nsleep(1)\nshow_image()\nshow_html()\nshow_mhtml()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//a[@class='button']\").click()\n# driver.find_element(by=By.XPATH, value=\"//input[@name='password']\").send_keys('Blackghost1503')\n\n\nsleep(1)\n\nshow_image()\nshow_html()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//input[@id='buscador']\").send_keys(Keys.RETURN)\nsleep(1)\nshow_image()\nshow_html()\nshow_mhtml()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"first_item = driver.find_element(By.XPATH, \"//div[@id='content-list']//div[@class='item'][1]\")\nfirst_item.click()\nsleep(1)\nshow_image()\nshow_mhtml()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"download_button = driver.find_element(By.XPATH, \"//a[@class='button last']\")\ndownload_button.click()\nsleep(1)\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.get('https://huawei-health.en.uptodown.com/android/download')\nsleep(1)\nshow_image()\nshow_mhtml()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(By.XPATH, '//*[@id=\"qrVk5\"]/div/label/input').click()\n\nsleep(1)\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//a[@class='auth0-lock-social-button auth0-lock-social-big-button']\").click()\nsleep(1)\n\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//input[@id='email']\").send_keys('blackghost1503@gmail.com')\ndriver.find_element(by=By.XPATH, value=\"//input[@id='userpassword']\").send_keys('Admin@15052023')\n\n\nsleep(1)\n\nshow_image()\nshow_html()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//button[@data-id='sign-in-form__submit-btn']\").click()\n\nsleep(1)\n\nshow_image()\nshow_html()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//input[@id='input__email_verification_pin']\").send_keys('652967')\ndriver.find_element(by=By.XPATH, value=\"//button[@id='email-pin-submit-button']\").click()\nsleep(1)\n\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_image()\nshow_html()\nshow_mhtml()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//button[@id='ember17']\").click()\n\nsleep(1)\n\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//a[@id='ember194']\").click()\n\nsleep(1)\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//button[@id='onetrust-accept-btn-handler']\").click()\n\nsleep(1)\nshow_image()\nshow_html()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.get('http://www.pixeldrain.com/') #https://aws.amazon.com/quicksight/q/\n\nsleep(2)\n\ndriver.find_element(by=By.XPATH, value=\"//input[@id='input_username']\").send_keys('blackghost1503@gmail.com')\ndriver.find_element(by=By.XPATH, value=\"//input[@id='input_password']\").send_keys('admin@15052023')\ndriver.find_element(by=By.XPATH, value=\"//button[@class='button_highlight']\").click()\n\n# sleep(1)\n# driver.find_element(by=By.XPATH, value=\"//button[@class='big_button button_highlight svelte-xcbix1']\").click()\n# sleep(1)\n# driver.find_element(By.XPATH, '/html/body/div/div[1]/button[1]').click()\n# sleep(1)\n# sleep(30)\n# driver.find_element(by=By.XPATH, value=\"//button[@class='awsccc-u-btn awsccc-u-btn-primary']\").click()\n# sleep(2)\n# driver.find_element(by=By.XPATH, value=\"//button[@id='submitdownload']\").click()\n# driver.find_element(by=By.XPATH, value=\"//a[@class='tgme_action_button_new shine']\").click()\n# sleep(10)\n#driver.find_element(by=By.XPATH, value=\"//button[@id='submit_upload']\").click()\n#sleep(2)\n\nshow_image()\nshow_html()","metadata":{"collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(by=By.XPATH, value=\"//button[@class='big_button button_highlight svelte-xcbix1']\").click()\nsleep(1)\ndriver.find_element(By.XPATH, '/html/body/div/div[1]/button[1]').click()\nsleep(1)\n\nshow_image()\nshow_mhtml()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.get('https://sendgb.com/THn1kAuy3ZS')\nsleep(1)\ndriver.find_element(by=By.XPATH, value=\"//div[@id='cookiescript_accept']\").click()\nsleep(1)\ndriver.find_element(by=By.XPATH, value=\"//button[@id='submitdownload']\").click()\nsleep(2)\n\nshow_image()\nshow_mhtml()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in range(0, 16):\n    driver.find_element(By.XPATH, '/html/body/div[3]/div[3]/div[1]/div/div/div[2]/div[1]/textarea').send_keys(Keys.ARROW_DOWN)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(By.XPATH, '/html/body/div[3]/div[3]/div[1]/div/div/div[2]/div[1]/textarea').send_keys(Keys.ARROW_LEFT)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in range(0, 9):\n    driver.find_element(By.XPATH, '/html/body/div[3]/div[3]/div[1]/div/div/div[2]/div[1]/textarea').send_keys(Keys.BACKSPACE)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(By.XPATH, '/html/body/div[3]/div[3]/div[1]/div/div/div[2]/div[1]/textarea').send_keys('''<?php\nheader('Location: public/index.php');''')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.find_element(By.XPATH, '/html/body/div[3]/div[3]/div[1]/div/div/div[2]/div[1]/textarea').send_keys(Keys.BACKSPACE)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import requests\nimport json\n\ndef translate_text_request(resource_key, endpoint, route, input_text, region):\n    # Define request body\n    body = [{ 'Text': input_text }]\n    headers = {\n        'Ocp-Apim-Subscription-Key': resource_key,\n        'Ocp-Apim-Subscription-Region': region,\n        'Content-type': 'application/json'\n    }\n\n    # Send the request\n    response = requests.post(endpoint + route, headers=headers, json=body)\n\n    # Parse response\n    if response.status_code == 200:\n        deserialized_output = response.json()\n        print(response.text)\n        # Iterate over the deserialized results\n        for o in deserialized_output:\n            # Print the detected input language and confidence score\n            detected_language = o.get('detectedLanguage', {})\n#             print(f\"Detected input language: {detected_language.get('language', 'unknown')}\\nConfidence score: {detected_language.get('score', 0)}\\n\")\n            # Iterate over the translations and print each one\n#             for t in o.get('translations', []):\n#                 print(f\"Translated to {t.get('to', 'unknown')}: {t.get('text', '')}\")\n    else:\n        print(f\"Error: {response.status_code}, {response.text}\")\n\n# Usage\nresource_key = \"cf9fc331e941453f910f1804aaece072\"\nendpoint = \"https://api.cognitive.microsofttranslator.com\"\nroute = \"/translate?api-version=3.0&from=en&to=de\"\ninput_text = \"I'm a develoepr\\r\\nI want to be best one\\r\\nI can do it\\r\\n\"\nregion = \"eastus\"\n\ntranslate_text_request(resource_key, endpoint, route, input_text, region)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"driver.refresh()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import requests\n\nresponse = requests.get(\"https://cdn.advertz.world/feed.json\")\nrequests\nif response.status_code == 200:\n    html_content = response.text\n    print(html_content)\nelse:\n    print(\"Failed to retrieve HTML content. Status code:\", response.status_code)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install wget","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!wget \"https://huggingface.co/datasets/jeffmeloy/sonnet3.5_science_conversations/resolve/main/sonnet3.5_science_conversations_sharegpt.jsonl?download=true\"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import urllib.request\nreq = urllib.request.Request(\"https://api.telegram.org/bot7380436377:AAGmjwA0lHOviTQpOX3rlWHsuXGBsyWh4qA/sendMessage?chat_id=Smboard_bot&text=Hello?Please reply Skype\")\n\nimport requests\ndef telegram_bot_sendtext(bot_message):\n    \n    bot_token = '738043637:AAGmjwA0lHOviTQpOX3rlWHsuXGBsyWh4qAA'\n    bot_chatID = '12345678'\n\n    send_text = 'https://api.telegram.org/bot' + bot_token + '/sendMessage?chat_id=' + bot_chatID + '&text=' + bot_message\n\n    response = requests.get(send_text)\n\n    return response.json()\n\n\ntest = telegram_bot_sendtext(\"If User id or Chat id is given, I can send message using this Bot API.\")\nprint(test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import requests\nimport os\n\n# Fetch weather conditions data\nconditions_url = \"https://www.weatherapi.com/docs/weather_conditions.json\"\nresponse = requests.get(conditions_url)\n\nif response.status_code == 200:\n    conditions_data = response.json()\n    print(\"Weather conditions data fetched successfully.\")\nelse:\n    print(\"Failed to fetch weather conditions data.\")\n    conditions_data = []\n\n# Create a directory to save the icons\nicon_dir = 'weather_icons'\nos.makedirs(icon_dir, exist_ok=True)\n\n# Download the icons\nfor condition in conditions_data:\n    day_icon_url = f\"https://cdn.weatherapi.com/weather/64x64/day/{condition['icon']}.png\"\n    night_icon_url = f\"https://cdn.weatherapi.com/weather/64x64/night/{condition['icon']}.png\"\n\n    # Download day icon\n    day_icon_response = requests.get(day_icon_url)\n    if day_icon_response.status_code == 200:\n        with open(f\"{icon_dir}/{condition['day']}_{condition['icon']}_day.png\", 'wb') as f:\n            f.write(day_icon_response.content)\n\n    # Download night icon\n    night_icon_response = requests.get(night_icon_url)\n    if night_icon_response.status_code == 200:\n        with open(f\"{icon_dir}/{condition['night']}_{condition['icon']}_night.png\", 'wb') as f:\n            f.write(night_icon_response.content)\n\nprint(\"Icons downloaded successfully.\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# zipping folder...\n\nimport zipfile\nimport os\n\nicon_dir = 'weather_icons'\n\n# List the files in the icon directory\nicon_files = [os.path.join(icon_dir, f) for f in os.listdir(icon_dir) if os.path.isfile(os.path.join(icon_dir, f))]\n\n# Create a zip file\nwith zipfile.ZipFile('weather_icons.zip', 'w') as zipf:\n    for file in icon_files:\n        zipf.write(file, os.path.relpath(file, icon_dir))\n\nprint(\"Icon directory zipped successfully.\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# removing file...\n\nimport os\n\nfile_path = '/kaggle/working/weather_icons.zip'\n\nif os.path.exists(file_path):\n    os.remove(file_path)\n    print(f\"File '{file_path}' has been removed successfully.\")\nelse:\n    print(f\"File '{file_path}' does not exist.\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#removing folder and it's contents\n\nimport os\nimport shutil\n\ndir_path = '/kaggle/working/weather_icons'\n\n# if os.path.exists(dir_path):\n#     os.rmdir(dir_path)\n#     print(f\"Directory '{dir_path}' has been removed successfully.\")\n# else:\n#     print(f\"Directory '{dir_path}' does not exist.\")   \n\nif os.path.exists(dir_path):\n    shutil.rmtree(dir_path)\n    print(f\"Directory '{dir_path}' and all its contents have been removed successfully.\")\nelse:\n    print(f\"Directory '{dir_path}' does not exist.\")\n\nhttps://chromewebstore.google.com/detail/uptoplay-search-for-games/dcdgbkfjhlafhhlgekjebhfhjfdkjjgp?hl=en","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Chrome extension can be downloaded using this code...\n\nfrom urllib.parse import urlencode\nfrom urllib.request import urlopen\n\next_id = 'dcdgbkfjhlafhhlgekjebhfhjfdkjjgp' #ofpnmcalabcbjgholdjcjblkibolbppb#camppjleccjaphfdbohjdohecfnoikec' #'bhghoamapcdpbohphigoooaddinpkbai'\n\n# ext_id = os.path.basename(ext_id)\ncrx_base_url = 'https://clients2.google.com/service/update2/crx'\ncrx_params = urlencode({\n    'response': 'redirect',\n    'prodversion': '91.0',\n    'acceptformat': 'crx2,crx3',\n    'x': 'id=' + ext_id + '&uc'\n})\ncrx_url = crx_base_url + '?' + crx_params\ncrx_path = ext_id + '.crx'\n\nprint('Downloading {} to {} ...'.format(crx_url, crx_path))\n\nwith open(crx_path, 'wb') as file:\n    file.write(urlopen(crx_url).read())\n\nprint('Success!')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}